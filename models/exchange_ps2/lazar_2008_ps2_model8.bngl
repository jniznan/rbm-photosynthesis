begin model

begin parameters
    # Rate constants:
	ekL     4000   # 1/sec Charge separation rate, Lazar_2003
	ekRec  10000   # 1/sec Charge recombination rate, Lazar_2003
	ek01   20000   # 1/sec Electron donation from S0 to P680+ rate constant, Lazar_2003
	ek12   10000
	ek23    3330
	ek30    1000
	ekAB1   3500   # 1/sec Electron transport from Qa- to Qb, Lazar_2003
	ekAB2   1750   # 1/sec Electron transport from Qa- to Qb-, Lazar_2003
	ekBA1    175   # 1/sec Electron transport from Qb- to Qa, Lazar_2003
	ekBA2     35   # 1/sec Electron transport from Qb2- to Qa, Lazar_2003 
	ekfUnbind  500 
	ekbUnbind  500
	ekfBind  500 
	ekbBind  500
	ekOx      10
	ekRed     10
end parameters

begin molecule types
	PSII(P680~n~p,Qa~n~m,S~0~1~2~3,Qb~n~m)
	PQ(Qb~n~m~2m)
end molecule types

begin seed species
    PSII(P680~n,Qa~n,S~1,Qb~m)       0.75
    PSII(P680~n,Qa~n,S~1,Qb~n)       0.25
	PQ(Qb~n)   2.5
	PQ(Qb~2m)  2.5
end seed species

begin reaction rules
	# Light induced charge separation between P680 and Qa and charge recombination:
	PSII(P680~n,Qa~n) <-> PSII(P680~p,Qa~m)  ekL, ekRec
	# Electron donation from S-states of OEC to P680+
	PSII(P680~p,S~0) -> PSII(P680~n,S~1)  ek01
	PSII(P680~p,S~1) -> PSII(P680~n,S~2)  ek12
	PSII(P680~p,S~2) -> PSII(P680~n,S~3)  ek23
	PSII(P680~p,S~3) -> PSII(P680~n,S~0)  ek30
	# Electron transport from Qa- to Qb:
	PSII(Qa~m,Qb~m!1).PQ(Qb~n!1) <-> PSII(Qa~n,Qb~m!1).PQ(Qb~m!1)   ekAB1, ekBA1
	PSII(Qa~m,Qb~m!1).PQ(Qb~m!1) <-> PSII(Qa~n,Qb~m!1).PQ(Qb~2m!1)  ekAB2, ekBA2
	# Exchange of doubly reduced Qb with oxidized PQ molecule from the PQ pool.
	# by two subsequent reversible reactions:
	PSII(Qb~m!1).PQ(Qb~2m!1) <-> PSII(Qb~m) + PQ(Qb~2m) ekfUnbind, ekbUnbind
	PSII(Qb~m) + PQ(Qb~n) <-> PSII(Qb~m!1).PQ(Qb~n!1)   ekfBind, ekbBind
	# Reversible reoxidation of reduced PQ molecules from the PQ pool:
	PQ(Qb~2m) <-> PQ(Qb~n)  ekOx, ekRed
end reaction rules

begin observables
	Molecules    Qa_m    PSII(Qa~m)
	Molecules    PQ      PQ(Qb~n)
end observables

end model

## actions ##
# construct reaction network
generate_network({overwrite=>1})

simulate({method=>ode,t_start=>1e-6,t_end=>1,n_steps=>5000})



